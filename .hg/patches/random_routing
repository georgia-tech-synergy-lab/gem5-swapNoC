diff -r f1e8f42a1041 configs/network/Network.py
--- a/configs/network/Network.py	Mon Oct 10 12:29:24 2016 -0400
+++ b/configs/network/Network.py	Mon Oct 10 12:36:43 2016 -0400
@@ -70,7 +70,8 @@
                       help="""routing algorithm in network.
                             0: weight-based table
                             1: XY (for Mesh. see garnet2.0/RoutingUnit.cc)
-                            2: Custom (see garnet2.0/RoutingUnit.cc""")
+                            2: Random (for Mesh. see garnet2.0/RoutingUnit.cc)
+                            3: Custom (see garnet2.0/RoutingUnit.cc""")
     parser.add_option("--network-fault-model", action="store_true",
                       default=False,
                       help="""enable network fault model:
diff -r f1e8f42a1041 src/mem/ruby/network/garnet2.0/CommonTypes.hh
--- a/src/mem/ruby/network/garnet2.0/CommonTypes.hh	Mon Oct 10 12:29:24 2016 -0400
+++ b/src/mem/ruby/network/garnet2.0/CommonTypes.hh	Mon Oct 10 12:36:43 2016 -0400
@@ -43,7 +43,7 @@
 enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};
 enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};
 enum link_type { EXT_IN_, EXT_OUT_, INT_, NUM_LINK_TYPES_ };
-enum RoutingAlgorithm { TABLE_ = 0, XY_ = 1, CUSTOM_ = 2,
+enum RoutingAlgorithm { TABLE_ = 0, XY_ = 1, RANDOM_  = 2, CUSTOM_ = 3,
                         NUM_ROUTING_ALGORITHM_};
 
 struct RouteInfo
diff -r f1e8f42a1041 src/mem/ruby/network/garnet2.0/RoutingUnit.cc
--- a/src/mem/ruby/network/garnet2.0/RoutingUnit.cc	Mon Oct 10 12:29:24 2016 -0400
+++ b/src/mem/ruby/network/garnet2.0/RoutingUnit.cc	Mon Oct 10 12:36:43 2016 -0400
@@ -160,6 +160,8 @@
             lookupRoutingTable(route.vnet, route.net_dest); break;
         case XY_:     outport =
             outportComputeXY(route, inport, inport_dirn); break;
+        case RANDOM_: outport =
+            outportComputeRandom(route, inport, inport_dirn); break;
         // any custom algorithm
         case CUSTOM_: outport =
             outportComputeCustom(route, inport, inport_dirn); break;
@@ -230,6 +232,67 @@
     return m_outports_dirn2idx[outport_dirn];
 }
 
+int
+RoutingUnit::outportComputeRandom(RouteInfo route,
+                                 int inport,
+                                 PortDirection inport_dirn)
+{
+    PortDirection outport_dirn = "Unknown";
+
+    int M5_VAR_USED num_rows = m_router->get_net_ptr()->getNumRows();
+    int num_cols = m_router->get_net_ptr()->getNumCols();
+    assert(num_rows > 0 && num_cols > 0);
+
+    int my_id = m_router->get_id();
+    int my_x = my_id % num_cols;
+    int my_y = my_id / num_cols;
+
+    int dest_id = route.dest_router;
+    int dest_x = dest_id % num_cols;
+    int dest_y = dest_id / num_cols;
+
+    int x_hops = abs(dest_x - my_x);
+    int y_hops = abs(dest_y - my_y);
+
+    bool x_dirn = (dest_x >= my_x);
+    bool y_dirn = (dest_y >= my_y);
+
+    // already checked that in outportCompute() function
+    assert(!(x_hops == 0 && y_hops == 0));
+
+    if (x_hops == 0)
+    {
+        if (y_dirn > 0)
+            outport_dirn = "North";
+        else
+            outport_dirn = "South";
+    }
+    else if (y_hops == 0)
+    {
+        if (x_dirn > 0)
+            outport_dirn = "East";
+        else
+            outport_dirn = "West";
+    }
+    else
+    {
+        int rand = random() % 2;
+
+        if (x_dirn && y_dirn) // Quadrant I
+            outport_dirn = rand ? "East" : "North";
+        else if (!x_dirn && y_dirn) // Quadrant II
+            outport_dirn = rand ? "West" : "North";
+        else if (!x_dirn && !y_dirn) // Quadrant III
+            outport_dirn = rand ? "West" : "South";
+        else // Quadrant IV
+            outport_dirn = rand ? "East" : "South";
+
+    }
+
+    return m_outports_dirn2idx[outport_dirn];
+
+}
+
 // Template for implementing custom routing algorithm
 // using port directions. (Example adaptive)
 int
diff -r f1e8f42a1041 src/mem/ruby/network/garnet2.0/RoutingUnit.hh
--- a/src/mem/ruby/network/garnet2.0/RoutingUnit.hh	Mon Oct 10 12:29:24 2016 -0400
+++ b/src/mem/ruby/network/garnet2.0/RoutingUnit.hh	Mon Oct 10 12:36:43 2016 -0400
@@ -67,6 +67,12 @@
                          int inport,
                          PortDirection inport_dirn);
 
+    // Random Routing
+    int outportComputeRandom(RouteInfo route,
+                             int inport,
+                             PortDirection inport_dirn);
+
+
     // Custom Routing Algorithm using Port Directions
     int outportComputeCustom(RouteInfo route,
                              int inport,
